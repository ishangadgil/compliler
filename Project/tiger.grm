structure A = Absyn
%%

(* Name of the parser *)
%name Tiger
%pos int

(* The terminals or tokens of the language *)
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON 
  | LPAREN | RPAREN | LBRACK | RBRACK | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | UMINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF | BREAK | NIL
  | FUNCTION | VAR | TYPE 


%nonterm  program of A.exp
        | exp of A.exp
        | lvalue of A.var
        | expseq of (A.exp * pos) list
        | funarg of A.exp list
        | funargNonNull of A.exp list
        | decs of A.dec list
        | decsNonNull of A.dec list
        | dec of A.dec
        | tydecs of {name : A.symbol, ty : A.ty,  pos : pos} list
        | tydec of {name : A.symbol, ty : A.ty,  pos : pos}
        | ty of A.ty
        | tyfields of A.field list
        | vardec of {name: A.symbol, escape: bool ref, typ: (A.symbol * pos) option, init: A.exp, pos: pos}
        | fundecs of A.fundec list 
        | fundec of A.fundec
        | letbody of A.exp
        | recordbody of (A.symbol * A.exp * pos) list
       


%verbose
%start program
%eop EOF
%noshift EOF


%nonassoc ASSIGN
%nonassoc ID
%nonassoc WHILE DO
%right THEN
%right ELSE
%nonassoc LBRACK RBRACK OF
%left OR
%left AND
%nonassoc EQ NEQ LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
    DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%verbose

%%

program : exp                                   (exp)

exp: lvalue                                     (A.VarExp(lvalue))
   | NIL                                        (A.NilExp)
   | LPAREN expseq RPAREN    					          (A.SeqExp(expseq))
   | LPAREN RPAREN                              (A.SeqExp([]))
   | LET decs IN letbody END                    (A.LetExp({decs=decs, body=letbody, pos=LETleft}))
   | INT                                        (A.IntExp(INT))
   | STRING                                     (A.StringExp(STRING, STRINGleft))
   | ID LPAREN funarg RPAREN                    (A.CallExp({func=Symbol.symbol ID, args=funarg, pos=IDleft}))
   | MINUS exp %prec UMINUS                     (A.OpExp({left=A.IntExp(0), oper=A.MinusOp, right=exp, pos=MINUSleft}))
   | exp PLUS exp                               (A.OpExp({left=exp1, oper=A.PlusOp, right=exp2, pos=exp1left}))
   | exp MINUS exp                              (A.OpExp({left=exp1, oper=A.MinusOp, right=exp2, pos=exp1left}))
   | exp TIMES exp                              (A.OpExp({left=exp1, oper=A.TimesOp, right=exp2, pos=exp1left}))
   | exp DIVIDE exp                             (A.OpExp({left=exp1, oper=A.DivideOp, right=exp2, pos=exp1left}))
   | exp EQ exp                                 (A.OpExp({left=exp1, oper=A.EqOp, right=exp2, pos=exp1left}))
   | exp NEQ exp                                (A.OpExp({left=exp1, oper=A.NeqOp, right=exp2, pos=exp1left}))
   | exp LT exp                                 (A.OpExp({left=exp1, oper=A.LtOp, right=exp2, pos=exp1left}))
   | exp LE exp                                 (A.OpExp({left=exp1, oper=A.LeOp, right=exp2, pos=exp1left}))
   | exp GT exp                                 (A.OpExp({left=exp1, oper=A.GtOp, right=exp2, pos=exp1left}))
   | exp GE exp                                 (A.OpExp({left=exp1, oper=A.GeOp, right=exp2, pos=exp1left}))
   | exp AND exp                                (A.IfExp({test=exp1, then'=exp2, else'=SOME(A.IntExp(0)), pos=exp1left}))
   | exp OR exp                                 (A.IfExp({test=exp1, then'=A.IntExp(1), else'=SOME exp2, pos=exp1left}))
   | lvalue ASSIGN exp                          (A.AssignExp({var=lvalue, exp=exp, pos=lvalueleft}))
   | ID LBRACE recordbody RBRACE                (A.RecordExp({fields=recordbody, typ=Symbol.symbol ID, pos=IDleft}))
   | ID LBRACK exp RBRACK OF exp                (A.ArrayExp({typ=Symbol.symbol ID, size=exp1, init=exp2, pos=IDleft}))
   | IF exp THEN exp ELSE exp                   (A.IfExp({test=exp1, then'=exp2, else'=SOME exp3, pos=IFleft}))
   | IF exp THEN exp                            (A.IfExp({test=exp1, then'=exp2, else'=NONE, pos=IFleft}))
   | WHILE exp DO exp                           (A.WhileExp({test=exp1, body=exp2, pos=WHILEleft}))
   | FOR ID ASSIGN exp TO exp DO exp            (A.ForExp({var=Symbol.symbol ID, escape=(ref true), lo=exp1, hi=exp2, body=exp3, pos=FORleft}))
   | BREAK                                      (A.BreakExp(BREAKleft))
   | LPAREN exp RPAREN                          (exp)

lvalue : ID                                     (A.SimpleVar(Symbol.symbol ID, IDleft))
       | lvalue DOT ID                          (A.FieldVar(lvalue, Symbol.symbol ID, lvalueleft))
       | ID LBRACK exp RBRACK                   (A.SubscriptVar(A.SimpleVar(Symbol.symbol ID, IDleft), exp, IDleft))
       | lvalue LBRACK exp RBRACK               (A.SubscriptVar(lvalue, exp, lvalueleft))

expseq : exp 									                  ([(exp, expleft)])
       | expseq SEMICOLON exp 					        (expseq @ [(exp, expleft)])

funarg : 										                    ([])
	   | funargNonNull                            (funargNonNull)

funargNonNull : exp 							              ([exp])
			  | funargNonNull COMMA exp 		          (funargNonNull @ [exp])

letbody : 										                  (A.SeqExp([]))
		| expseq 								                    (A.SeqExp(expseq))

recordbody : ID EQ exp                          ([(Symbol.symbol ID, exp, defaultPos)])
           | ID EQ exp COMMA recordbody         ((Symbol.symbol ID, exp, defaultPos) :: recordbody)
           |                                    ([])

decs : decsNonNull								              (decsNonNull)
	 | 											                      ([])

decsNonNull : dec 								              ([dec])
			| decsNonNull dec 					              (decsNonNull @ [dec])

dec : tydecs									                   (A.TypeDec(tydecs))
	| vardec									                     (A.VarDec(vardec))
	| fundecs 									                   (A.FunctionDec(fundecs))

tydecs : tydec 									                 ([tydec])
	   | tydecs tydec 							               (tydecs @ [tydec]) 	

tydec : TYPE ID EQ ty 							             ({name=Symbol.symbol ID, ty=ty, pos=IDleft})

ty: ID  										                     (A.NameTy(Symbol.symbol(ID), IDleft))
  | LBRACE tyfields RBRACE  			 		           (A.RecordTy(tyfields))
  | ARRAY OF ID   								               (A.ArrayTy(Symbol.symbol(ID), ARRAYleft))

tyfields :                                      ([])
         | tyfields COMMA ID COLON ID           (tyfields @ [{name=Symbol.symbol ID1, escape=(ref true), typ=Symbol.symbol ID2, pos=ID1left}])
         | ID COLON ID                          ([{name=Symbol.symbol ID1, escape=(ref true), typ=Symbol.symbol ID2, pos=ID1left}])

vardec : VAR ID ASSIGN exp 						({name=Symbol.symbol ID, escape=ref true, typ=NONE, init=exp, pos=VARleft})
	   | VAR ID COLON ID ASSIGN exp 			({name=Symbol.symbol(ID1), escape=ref true, typ=SOME(Symbol.symbol(ID2),ID2left), init=exp, pos=VARleft})

fundecs : fundec 									               ([fundec])
	      | fundecs fundec 						             (fundecs @ [fundec])

fundec : FUNCTION ID LPAREN tyfields RPAREN EQ exp 			({name=Symbol.symbol ID,params=tyfields, result=NONE, body=exp, pos=FUNCTIONleft})
	   | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp ({name=Symbol.symbol(ID1),params=tyfields, result=SOME(Symbol.symbol(ID2),ID2left), body=exp, pos=FUNCTIONleft})
     